--- 
title: "Dialect Identification (dialectid)"
format: 
  dashboard:
    logo: images/ingeotec.png
    orientation: columns
    nav-buttons: [github]
    theme: cosmo
execute:
  freeze: auto    
---

```{python} 
#| echo: false 
#| include: false
#| label: setup

from dialectid import BoW
from dialectid.utils import BASEURL, COUNTRIES, load_bow
from EvoMSA import BoW as eBoW
from EvoMSA.utils import Download
from microtc.utils import tweet_iterator
from os.path import isfile, join
import numpy as np
import json


def similarity(lang):
    cache = join('data', f'{lang}-similarity.json')
    if isfile(cache):
        return next(tweet_iterator(cache))
    _ = Download(f'{BASEURL}/stats-{lang}-train.json', f'stats-{lang}.json')
    data = next(tweet_iterator(f'stats-{lang}.json'))
    countries = [country for country in COUNTRIES[lang] + ['ALL']
                if data[country] > 2**22]
    bows = [BoW(lang=lang, loc=loc) for loc in countries]
    tokens = [set(bow.names) for bow in bows]
    vocs = []
    for country in countries:
        freq = load_bow(lang=lang, d=17, loc=country)
        c = np.linalg.norm(list(freq.values()))
        vocs.append({k: v / c for k, v in freq.items()})
    sim = np.ones((len(countries), len(countries)))
    for r in range(len(countries)):
        for c in range(r + 1, len(countries)):
            nom = len(tokens[r].intersection(tokens[c]))
            den = len(tokens[r].union(tokens[c]))
            sim[r, c] = nom / den
            sim[c, r] = sim[r, c]
    cos = np.ones((len(countries), len(countries)))
    for r in range(len(countries)):
        for c in range(r + 1, len(countries)):
            _ = sum([vocs[r][k] * vocs[c][k]
                     for k in tokens[r].intersection(tokens[c])])
            cos[r, c] = _
            cos[c, r] = _
    with open(cache, 'w') as fpt:
        print(json.dumps(dict(sim=sim.tolist(),
                              cos=cos.tolist(),
                              countries=countries)),
              file=fpt)
    return similarity(lang)
```

# Introduction

Computational models for dialect identification.

# Languages

# Similarity

## Column {width="40%"}

### Tabset {.tabset height="50%"} 

```{python} 
#| echo: false 
#| title: Arabic (ar)

import plotly.express as px

data = similarity('ar')
countries = data['countries']
fig = px.imshow(data['sim'],
                labels=dict(x="Country", y="Country", color="Similarity"),
                x=countries,
                y=countries)
# fig.update_xaxes(side="top")
fig.show()
```

```{python} 
#| echo: false 
#| title: English (en)

import plotly.express as px

data = similarity('en')
countries = data['countries']
fig = px.imshow(data['sim'],
                labels=dict(x="Country", y="Country", color="Similarity"),
                x=countries,
                y=countries)
# fig.update_xaxes(side="top")
fig.show()
```

```{python} 
#| echo: false 
#| title: Spanish (es)

import plotly.express as px

data = similarity('es')
countries = data['countries']
fig = px.imshow(data['sim'],
                labels=dict(x="Country", y="Country", color="Similarity"),
                x=countries,
                y=countries)
# fig.update_xaxes(side="top")
fig.show()
```

### Tabset {.tabset height="50%"}

```{python} 
#| echo: false 
#| title: Arabic (ar)

import plotly.express as px

data = similarity('ar')
countries = data['countries']
fig = px.imshow(data['cos'],
                labels=dict(x="Country", y="Country", color="Similarity"),
                x=countries,
                y=countries)
# fig.update_xaxes(side="top")
fig.show()
```

```{python} 
#| echo: false 
#| title: English (en)

import plotly.express as px

data = similarity('en')
countries = data['countries']
fig = px.imshow(data['cos'],
                labels=dict(x="Country", y="Country", color="Similarity"),
                x=countries,
                y=countries)
# fig.update_xaxes(side="top")
fig.show()
```

```{python} 
#| echo: false 
#| title: Spanish (es)

import plotly.express as px

data = similarity('es')
countries = data['countries']
fig = px.imshow(data['cos'],
                labels=dict(x="Country", y="Country", color="Similarity"),
                x=countries,
                y=countries)
# fig.update_xaxes(side="top")
fig.show()
```


## Column {width="60%"} 

The figures on the left correspond to the Jaccard index (top) and Cosine similarity (bottom) between the vocabularies estimated from data coming from a particular country.

For instance, the following code computes the similarity in Spanish between Mexico and Guatemala.

```{python}
#| echo: true
#| eval: false
#| label: jaccard

from dialectid import BoW

mx = BoW(lang='es', loc='mx')
gt = BoW(lang='es', loc='gt')
mx_voc = set(mx.names)
gt_voc = set(gt.names)
num = len(mx_voc.intersection(gt_voc))
den = len(mx_voc.union(gt_voc))
num / den
```

The following code exemplifies the Cosine similarity between Mexico and Guatemala.

```{python} 
#| echo: true
#| eval: false
#| label: cosine

import numpy as np
from dialectid.utils import load_bow

mx_freq = load_bow(lang='es', d=17, loc='mx')
_ = np.linalg.norm(list(mx_freq.values()))
mx_freq = {k: v / _ for k, v in mx_freq.items()}
gt_freq = load_bow(lang='es', d=17, loc='gt')
_ = np.linalg.norm(list(gt_freq.values()))
gt_freq = {k: v / _ for k, v in gt_freq.items()}
tokens = [token for token in mx_freq if token in gt_freq]
sum([mx_freq[token] * gt_freq[token]
     for token in tokens])
```

# Usage

# Performance

## Column {.tabset}
```{python}
#| echo: false
#| title: Arabic (ar)
import pandas as pd
import plotly.express as px
df = pd.read_csv('data/ar-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: German (de)
import pandas as pd
df = pd.read_csv('data/de-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: English (en)
import pandas as pd
df = pd.read_csv('data/en-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: Spanish (es)
import pandas as pd
df = pd.read_csv('data/es-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: French (fr)
import pandas as pd
df = pd.read_csv('data/fr-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: Dutch (nl)
import pandas as pd
df = pd.read_csv('data/nl-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: Portuguese (pt)
import pandas as pd
df = pd.read_csv('data/pt-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: Russian (ru)
import pandas as pd
df = pd.read_csv('data/ru-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: Turkish (tr)
import pandas as pd
df = pd.read_csv('data/tr-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```

```{python}
#| echo: false
#| title: Chinese (zh)
import pandas as pd
df = pd.read_csv('data/zh-recall.csv', index_col=0)
df2 = df.sort_values(by=['Training Size', 'Recall'])
fig = px.bar(df2.astype({'Training Size': str}),
             x='Country', y='Recall',
             barmode='overlay', 
             color='Training Size')
fig.show()
```